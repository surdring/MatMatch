"""
批量查重测试数据生成器

生成覆盖所有测试场景的Excel文件，用于验证三级判定逻辑和分类检测准确性
"""

import pandas as pd
from datetime import datetime
from pathlib import Path


def generate_comprehensive_test_data():
    """
    生成全面的测试数据，覆盖所有查重场景
    
    测试场景分类：
    1. 完全重复（判定标准1：名称+规格+单位完全匹配）
    2. 疑似重复-单位不同（判定标准2：名称+规格匹配，单位不同）
    3. 高度相似（判定标准3：相似度≥90%）
    4. 不重复（相似度<90%）
    5. 分类检测准确性测试
    """
    
    test_cases = []
    
    # ========================================================================
    # 场景1: 完全重复（Expected: 查重结论="重复"）
    # ========================================================================
    print("生成场景1: 完全重复测试用例...")
    
    # 1.1 维修类 - 功率单元（已知ERP编码：952602270）
    test_cases.append({
        "序号": 1,
        "测试场景": "完全重复",
        "物料名称": "维修功率单元",
        "规格型号": "HPU690/048MB1P",
        "单位": "台",
        "备注": "应匹配ERP编码952602270，判定为'重复'"
    })
    
    # 1.2 维修类 - 变频单元
    test_cases.append({
        "序号": 2,
        "测试场景": "完全重复",
        "物料名称": "维修变频单元",
        "规格型号": "HPU810/090MB1P",
        "单位": "台",
        "备注": "测试维修类的分类检测和查重"
    })
    
    # 1.3 标准件 - 六角螺栓
    test_cases.append({
        "序号": 3,
        "测试场景": "完全重复",
        "物料名称": "六角螺栓",
        "规格型号": "M8*25",
        "单位": "个",
        "备注": "测试标准件的查重逻辑"
    })
    
    # 1.4 轴承类 - 深沟球轴承
    test_cases.append({
        "序号": 4,
        "测试场景": "完全重复",
        "物料名称": "深沟球轴承",
        "规格型号": "6205-2RS",
        "单位": "个",
        "备注": "测试轴承类的分类检测"
    })
    
    # ========================================================================
    # 场景2: 疑似重复-单位不同（Expected: 查重结论="疑是重复"）
    # ========================================================================
    print("生成场景2: 疑似重复-单位不同测试用例...")
    
    # 2.1 维修功率单元（单位：套 vs 台）
    test_cases.append({
        "序号": 5,
        "测试场景": "疑似重复-单位不同",
        "物料名称": "维修功率单元",
        "规格型号": "HPU690/048MB1P",
        "单位": "套",
        "备注": "与ERP编码952602270名称规格相同，但单位不同（套vs台）"
    })
    
    # 2.2 不锈钢管（单位：米 vs 根）
    test_cases.append({
        "序号": 6,
        "测试场景": "疑似重复-单位不同",
        "物料名称": "不锈钢无缝钢管",
        "规格型号": "Φ108×4",
        "单位": "米",
        "备注": "测试单位不同的判定（假设ERP中为'根'）"
    })
    
    # ========================================================================
    # 场景3: 高度相似（Expected: 查重结论="疑是重复"，相似度≥90%）
    # ========================================================================
    print("生成场景3: 高度相似测试用例...")
    
    # 3.1 规格略有差异
    test_cases.append({
        "序号": 7,
        "测试场景": "高度相似-规格略有差异",
        "物料名称": "六角螺栓",
        "规格型号": "M8*20",
        "单位": "个",
        "备注": "规格从M8*25变为M8*20，测试相似度≥90%的判定"
    })
    
    # 3.2 同义词测试（304不锈钢 vs 不锈钢）
    test_cases.append({
        "序号": 8,
        "测试场景": "高度相似-同义词",
        "物料名称": "304不锈钢板",
        "规格型号": "1500*3000*3",
        "单位": "张",
        "备注": "测试同义词替换后的高相似度"
    })
    
    # 3.3 全角半角混合
    test_cases.append({
        "序号": 9,
        "测试场景": "高度相似-全角半角",
        "物料名称": "深沟球轴承",
        "规格型号": "６２０５－２ＲＳ",
        "单位": "个",
        "备注": "测试全角数字的标准化处理"
    })
    
    # ========================================================================
    # 场景4: 不重复（Expected: 查重结论="不重复"，相似度<90%）
    # ========================================================================
    print("生成场景4: 不重复测试用例...")
    
    # 4.1 完全不同的物料
    test_cases.append({
        "序号": 10,
        "测试场景": "不重复-完全不同",
        "物料名称": "安全帽",
        "规格型号": "ABS材质",
        "单位": "顶",
        "备注": "完全不同的物料，相似度应很低"
    })
    
    # 4.2 同类别但规格差异大
    test_cases.append({
        "序号": 11,
        "测试场景": "不重复-同类别差异大",
        "物料名称": "六角螺栓",
        "规格型号": "M24*150",
        "单位": "个",
        "备注": "同为六角螺栓，但规格差异很大"
    })
    
    # ========================================================================
    # 场景5: 分类检测准确性测试
    # ========================================================================
    print("生成场景5: 分类检测准确性测试用例...")
    
    # 5.1 维修类 - 多种表述
    test_cases.extend([
        {
            "序号": 12,
            "测试场景": "分类检测-维修类",
            "物料名称": "维修电控单元",
            "规格型号": "ECU-2024A",
            "单位": "台",
            "备注": "检测'维修类'分类识别（关键词：维修、电控单元）"
        },
        {
            "序号": 13,
            "测试场景": "分类检测-维修类",
            "物料名称": "功率模块",
            "规格型号": "PM-500W",
            "单位": "个",
            "备注": "检测'维修类'分类识别（关键词：功率模块）"
        },
        {
            "序号": 14,
            "测试场景": "分类检测-维修类",
            "物料名称": "维修驱动单元",
            "规格型号": "DRV-3000",
            "单位": "台",
            "备注": "检测'维修类'分类识别（关键词：维修、驱动单元）"
        }
    ])
    
    # 5.2 液压类
    test_cases.extend([
        {
            "序号": 15,
            "测试场景": "分类检测-液压类",
            "物料名称": "液压油泵",
            "规格型号": "HP-80",
            "单位": "台",
            "备注": "检测'液压类'分类识别"
        },
        {
            "序号": 16,
            "测试场景": "分类检测-液压类",
            "物料名称": "液压缸",
            "规格型号": "Φ100/Φ70*500",
            "单位": "个",
            "备注": "检测'液压类'分类识别"
        }
    ])
    
    # 5.3 密封类
    test_cases.extend([
        {
            "序号": 17,
            "测试场景": "分类检测-密封类",
            "物料名称": "O型密封圈",
            "规格型号": "Φ100*3.5",
            "单位": "个",
            "备注": "检测'密封类'分类识别"
        },
        {
            "序号": 18,
            "测试场景": "分类检测-密封类",
            "物料名称": "挡液圈",
            "规格型号": "DH100*110*8",
            "单位": "个",
            "备注": "检测'密封类'（挡液圈）分类识别，避免与'维修类'混淆"
        }
    ])
    
    # 5.4 电气类
    test_cases.extend([
        {
            "序号": 19,
            "测试场景": "分类检测-电气类",
            "物料名称": "三相异步电动机",
            "规格型号": "Y132M-4-7.5KW",
            "单位": "台",
            "备注": "检测'电气类'分类识别"
        },
        {
            "序号": 20,
            "测试场景": "分类检测-电气类",
            "物料名称": "交流接触器",
            "规格型号": "CJX2-2510",
            "单位": "个",
            "备注": "检测'电气类'分类识别"
        }
    ])
    
    # 5.5 轴承类
    test_cases.extend([
        {
            "序号": 21,
            "测试场景": "分类检测-轴承类",
            "物料名称": "圆锥滚子轴承",
            "规格型号": "30206",
            "单位": "个",
            "备注": "检测'轴承类'分类识别"
        },
        {
            "序号": 22,
            "测试场景": "分类检测-轴承类",
            "物料名称": "调心滚子轴承",
            "规格型号": "22220CA/W33",
            "单位": "个",
            "备注": "检测'轴承类'分类识别"
        }
    ])
    
    # ========================================================================
    # 场景6: 边界情况测试
    # ========================================================================
    print("生成场景6: 边界情况测试用例...")
    
    # 6.1 空格和特殊字符处理
    test_cases.append({
        "序号": 23,
        "测试场景": "边界-多余空格",
        "物料名称": "  六角螺栓  ",
        "规格型号": "  M8 * 25  ",
        "单位": " 个 ",
        "备注": "测试前后空格和内部多余空格的清理"
    })
    
    # 6.2 大小写混合
    test_cases.append({
        "序号": 24,
        "测试场景": "边界-大小写混合",
        "物料名称": "维修功率单元",
        "规格型号": "hpu690/048mb1p",
        "单位": "台",
        "备注": "测试大小写标准化（应匹配HPU690/048MB1P）"
    })
    
    # 6.3 中英文混合
    test_cases.append({
        "序号": 25,
        "测试场景": "边界-中英文混合",
        "物料名称": "不锈钢Stainless Steel板",
        "规格型号": "1500*3000*3mm",
        "单位": "张",
        "备注": "测试中英文混合描述的处理"
    })
    
    # 6.4 单位变体
    test_cases.extend([
        {
            "序号": 26,
            "测试场景": "边界-单位标准化",
            "物料名称": "六角螺栓",
            "规格型号": "M10*30",
            "单位": "只",
            "备注": "测试单位同义词（只 vs 个）"
        },
        {
            "序号": 27,
            "测试场景": "边界-单位标准化",
            "物料名称": "不锈钢管",
            "规格型号": "Φ108×4",
            "单位": "支",
            "备注": "测试单位同义词（支 vs 根）"
        }
    ])
    
    # ========================================================================
    # 场景7: 复杂规格测试
    # ========================================================================
    print("生成场景7: 复杂规格测试用例...")
    
    # 7.1 多参数规格
    test_cases.append({
        "序号": 28,
        "测试场景": "复杂规格-多参数",
        "物料名称": "不锈钢法兰",
        "规格型号": "DN100 PN16 304材质 RF面",
        "单位": "个",
        "备注": "测试多参数规格的属性提取"
    })
    
    # 7.2 带范围的规格
    test_cases.append({
        "序号": 29,
        "测试场景": "复杂规格-范围",
        "物料名称": "电缆",
        "规格型号": "YJV 3*120+1*70",
        "单位": "米",
        "备注": "测试复杂电缆规格的处理"
    })
    
    # 7.3 型号编码
    test_cases.append({
        "序号": 30,
        "测试场景": "复杂规格-型号编码",
        "物料名称": "变频器",
        "规格型号": "ACS550-01-023A-4",
        "单位": "台",
        "备注": "测试复杂型号编码的标准化"
    })
    
    print(f"共生成 {len(test_cases)} 个测试用例")
    
    return test_cases


def save_to_excel(test_cases, output_dir="temp"):
    """
    保存测试数据到Excel文件
    
    Args:
        test_cases: 测试用例列表
        output_dir: 输出目录
    """
    # 创建DataFrame
    df = pd.DataFrame(test_cases)
    
    # 创建输出目录
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # 生成文件名（带时间戳）
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"批量查重测试数据_全场景覆盖_{timestamp}.xlsx"
    filepath = output_path / filename
    
    # 保存到Excel
    with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='测试数据', index=False)
        
        # 获取工作表对象，调整列宽
        worksheet = writer.sheets['测试数据']
        
        # 设置列宽
        column_widths = {
            'A': 8,   # 序号
            'B': 20,  # 测试场景
            'C': 25,  # 物料名称
            'D': 30,  # 规格型号
            'E': 10,  # 单位
            'F': 60   # 备注
        }
        
        for col, width in column_widths.items():
            worksheet.column_dimensions[col].width = width
        
        # 设置标题行样式
        from openpyxl.styles import Font, PatternFill, Alignment
        
        for cell in worksheet[1]:
            cell.font = Font(bold=True, size=11)
            cell.fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            cell.font = Font(bold=True, color="FFFFFF", size=11)
            cell.alignment = Alignment(horizontal='center', vertical='center')
        
        # 设置所有单元格自动换行
        for row in worksheet.iter_rows(min_row=2):
            for cell in row:
                cell.alignment = Alignment(wrap_text=True, vertical='top')
    
    print(f"\n✅ 测试文件已生成: {filepath}")
    print(f"📊 共包含 {len(test_cases)} 个测试用例")
    print(f"\n测试场景统计:")
    
    # 统计各场景数量
    scenario_counts = {}
    for case in test_cases:
        scenario = case['测试场景'].split('-')[0]
        scenario_counts[scenario] = scenario_counts.get(scenario, 0) + 1
    
    for scenario, count in sorted(scenario_counts.items()):
        print(f"  - {scenario}: {count}个用例")
    
    return filepath


def main():
    """主函数"""
    print("=" * 80)
    print("批量查重测试数据生成器")
    print("=" * 80)
    print()
    
    # 生成测试数据
    test_cases = generate_comprehensive_test_data()
    
    print()
    print("=" * 80)
    print("保存到Excel文件...")
    print("=" * 80)
    print()
    
    # 保存到Excel
    filepath = save_to_excel(test_cases)
    
    print()
    print("=" * 80)
    print("使用说明")
    print("=" * 80)
    print()
    print("1. 打开前端页面的'批量查重'功能")
    print("2. 上传生成的Excel文件")
    print("3. 查看每个测试用例的查重结果")
    print("4. 验证以下方面:")
    print("   - ✅ 查重结论是否符合预期（重复/疑是重复/不重复）")
    print("   - ✅ 相似度计算是否准确")
    print("   - ✅ 单位和分类是否正确显示")
    print("   - ✅ 分类检测是否准确")
    print("   - ✅ 同义词替换是否生效")
    print("   - ✅ 全角半角转换是否正确")
    print()
    print("=" * 80)


if __name__ == "__main__":
    main()

