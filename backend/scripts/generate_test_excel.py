"""
生成测试用的Excel文件

用于测试物料批量查重功能
包含各种典型场景的物料数据
"""

import pandas as pd
from pathlib import Path
from datetime import datetime

def generate_test_excel():
    """
    生成包含多种典型场景的测试Excel文件
    """
    
    # 测试数据 - 包含各种典型场景
    test_data = [
        # 场景1: 标准物料（应该能找到高相似度匹配）
        {
            '物料名称': '304不锈钢板',
            '规格型号': '3mm*1220*2440',
            '单位': '张',
            '分类': '金属材料'
        },
        {
            '物料名称': '不锈钢板304',
            '规格型号': '厚度3mm 1220x2440',
            '单位': '片',
            '分类': '金属板材'
        },
        
        # 场景2: 带有品牌和型号的物料
        {
            '物料名称': 'SKF轴承',
            '规格型号': '6205-2RS',
            '单位': '个'
        },
        {
            '物料名称': '深沟球轴承SKF',
            '规格型号': '型号6205-2RS',
            '单位': '套'
        },
        
        # 场景3: 电子元件
        {
            '物料名称': '电阻',
            '规格型号': '1KΩ 1/4W 5%',
            '单位': '个'
        },
        {
            '物料名称': '碳膜电阻器',
            '规格型号': '阻值1000欧姆 功率0.25瓦 精度±5%',
            '单位': '只'
        },
        
        # 场景4: 机械零件
        {
            '物料名称': 'M8内六角螺栓',
            '规格型号': 'DIN912 8*30',
            '单位': '个'
        },
        {
            '物料名称': '内六角圆柱头螺钉',
            '规格型号': 'M8x30 DIN912标准',
            '单位': '支'
        },
        
        # 场景5: 化工原料
        {
            '物料名称': '氢氧化钠',
            '规格型号': '工业级 含量≥96%',
            '单位': '千克'
        },
        {
            '物料名称': '烧碱',
            '规格型号': 'NaOH 纯度96%以上 工业用',
            '单位': 'kg'
        },
        
        # 场景6: 电缆线材
        {
            '物料名称': 'RVV电缆',
            '规格型号': '2芯*1.5平方',
            '单位': '米'
        },
        {
            '物料名称': '铜芯软电缆RVV',
            '规格型号': '2*1.5mm²',
            '单位': 'm'
        },
        
        # 场景7: 办公用品
        {
            '物料名称': 'A4打印纸',
            '规格型号': '70g 500张/包',
            '单位': '包'
        },
        {
            '物料名称': '复印纸A4',
            '规格型号': '白色70克 每包500页',
            '单位': '盒'
        },
        
        # 场景8: 液压气动
        {
            '物料名称': '液压油',
            '规格型号': '抗磨液压油46号',
            '单位': '升'
        },
        {
            '物料名称': '46#抗磨液压油',
            '规格型号': 'HM46 ISO VG46',
            '单位': 'L'
        },
        
        # 场景9: 可能没有匹配的物料（特殊定制件）
        {
            '物料名称': '定制铝合金支架',
            '规格型号': '根据图纸XYZ-2024-001加工',
            '单位': '件'
        },
        {
            '物料名称': '非标准零件-特殊订制',
            '规格型号': '按客户要求特制',
            '单位': '个'
        },
        
        # 场景10: 常用工具
        {
            '物料名称': '扳手',
            '规格型号': '活动扳手200mm',
            '单位': '把'
        },
        {
            '物料名称': '活口扳手',
            '规格型号': '8寸 开口0-24mm',
            '单位': '个'
        },
        
        # 场景11: 阀门管件
        {
            '物料名称': '球阀',
            '规格型号': 'DN50 PN16 法兰连接',
            '单位': '个'
        },
        {
            '物料名称': '法兰球阀',
            '规格型号': '口径50mm 压力1.6MPa',
            '单位': '台'
        },
        
        # 场景12: 包装材料
        {
            '物料名称': '气泡膜',
            '规格型号': '宽1.2m 厚度3mm',
            '单位': '卷'
        },
        {
            '物料名称': '防震气泡袋',
            '规格型号': '1200mm*50m 气泡直径10mm',
            '单位': '捆'
        },
    ]
    
    # 创建DataFrame
    df = pd.DataFrame(test_data)
    
    # 添加序号列
    df.insert(0, '序号', range(1, len(df) + 1))
    
    # 添加备注列
    remarks = [
        '标准物料-场景1-A',
        '标准物料-场景1-B',
        '轴承-场景2-A',
        '轴承-场景2-B',
        '电阻-场景3-A',
        '电阻-场景3-B',
        '螺栓-场景4-A',
        '螺栓-场景4-B',
        '化工-场景5-A',
        '化工-场景5-B',
        '电缆-场景6-A',
        '电缆-场景6-B',
        '办公-场景7-A',
        '办公-场景7-B',
        '液压-场景8-A',
        '液压-场景8-B',
        '定制件-场景9-A（可能无匹配）',
        '定制件-场景9-B（可能无匹配）',
        '工具-场景10-A',
        '工具-场景10-B',
        '阀门-场景11-A',
        '阀门-场景11-B',
        '包装-场景12-A',
        '包装-场景12-B',
    ]
    df['备注'] = remarks
    
    # 生成文件名（带时间戳）
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_dir = Path(__file__).parent.parent.parent / 'temp'
    output_dir.mkdir(exist_ok=True)
    
    output_file = output_dir / f'物料查重测试数据_{timestamp}.xlsx'
    
    # 保存为Excel
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='待查重物料', index=False)
        
        # 添加说明sheet
        instructions = pd.DataFrame({
            '使用说明': [
                '1. 本Excel文件包含24条测试物料数据，分为12个场景',
                '2. 每个场景包含2条相似的物料描述（A和B），用于测试查重功能',
                '3. 场景1-8是常见的标准物料，应该能找到高相似度的匹配结果',
                '4. 场景9是定制件，可能无法找到匹配结果',
                '5. 场景10-12是其他常用物料类型',
                '',
                '测试建议：',
                '- 上传此文件后，配置列名为：物料名称、规格型号、单位',
                '- 观察不同场景的查重结果和相似度评分',
                '- 验证系统是否能正确识别同义词（如"张"vs"片"）',
                '- 验证系统是否能处理不同的描述方式',
                '',
                f'文件生成时间: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
            ]
        })
        instructions.to_excel(writer, sheet_name='使用说明', index=False)
    
    print(f"✅ 测试Excel文件已生成: {output_file}")
    print(f"📊 包含 {len(df)} 条测试数据")
    print(f"💡 场景覆盖: 标准物料、轴承、电子元件、机械零件、化工原料等12个典型场景")
    print(f"\n请使用前端页面上传此文件进行测试！")
    
    return output_file

if __name__ == '__main__':
    generate_test_excel()

